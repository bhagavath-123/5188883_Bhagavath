#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


#define MAX_LEN 1000000

typedef struct {
    int op; // 1 = append, 2 = delete
    char *text; // for undo
} OpStack;

int main() {
    
    
    int Q;
    scanf("%d", &Q);
    char S[MAX_LEN + 5] = "";
    int len = 0;
    OpStack *ops = malloc(sizeof(OpStack) * (Q + 2));
    int ops_top = -1;
    for (int i = 0; i < Q; i++) {
        int t;
        scanf("%d", &t);
        if (t == 1) {
            char buf[MAX_LEN + 5];
            scanf("%s", buf);
            int blen = strlen(buf);
            strncpy(S + len, buf, blen);
            len += blen;
            S[len] = '\0';
            ops_top++;
            ops[ops_top].op = 1;
            ops[ops_top].text = strdup(buf);
        } else if (t == 2) {
            int k;
            scanf("%d", &k);
            char *deleted = malloc((k + 1) * sizeof(char));
            strncpy(deleted, S + len - k, k);
            deleted[k] = '\0';
            len -= k;
            S[len] = '\0';
            ops_top++;
            ops[ops_top].op = 2;
            ops[ops_top].text = deleted;
        } else if (t == 3) {
            int k;
            scanf("%d", &k);
            printf("%c\n", S[k - 1]);
        } else if (t == 4) {
            if (ops_top < 0) continue;
            if (ops[ops_top].op == 1) {
                int blen = strlen(ops[ops_top].text);
                len -= blen;
                S[len] = '\0';
            } else if (ops[ops_top].op == 2) {
                int blen = strlen(ops[ops_top].text);
                strncpy(S + len, ops[ops_top].text, blen);
                len += blen;
                S[len] = '\0';
            }
            free(ops[ops_top].text);
            ops_top--;
        }
    }
    free(ops);
    return 0;
}

       

