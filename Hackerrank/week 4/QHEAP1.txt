typedef struct {
    int *data;
    int size;
} Heap;

void swap(int *a, int *b) {
    int t = *a; *a = *b; *b = t;
}

void heapifyUp(Heap *h, int idx) {
    while (idx > 0 && h->data[(idx-1)/2] > h->data[idx]) {
        swap(&h->data[(idx-1)/2], &h->data[idx]);
        idx = (idx-1)/2;
    }
}

void heapifyDown(Heap *h, int idx) {
    int left, right, smallest;
    while (1) {
        left = 2*idx+1;
        right = 2*idx+2;
        smallest = idx;
        if (left < h->size && h->data[left] < h->data[smallest]) smallest = left;
        if (right < h->size && h->data[right] < h->data[smallest]) smallest = right;
        if (smallest == idx) break;
        swap(&h->data[idx], &h->data[smallest]);
        idx = smallest;
    }
}

void insert(Heap *h, int v) {
    h->data[h->size++] = v;
    heapifyUp(h, h->size-1);
}

int find(Heap *h, int v) {
    for (int i = 0; i < h->size; i++)
        if (h->data[i] == v) return i;
    return -1;
}

void erase(Heap *h, int v) {
    int idx = find(h, v);
    if (idx == -1) return;
    swap(&h->data[idx], &h->data[h->size-1]);
    h->size--;
    heapifyDown(h, idx);
    heapifyUp(h, idx);
}

int getMin(Heap *h) {
    return h->data[0];
}

int main() {
    int Q, op, v;
    scanf("%d", &Q);
    Heap h;
    h.data = malloc(Q * sizeof(int));
    h.size = 0;
    for (int i = 0; i < Q; i++) {
        scanf("%d", &op);
        if (op == 1) {
            scanf("%d", &v);
            insert(&h, v);
        } else if (op == 2) {
            scanf("%d", &v);
            erase(&h, v);
        } else {
            printf("%d\n", getMin(&h));
        }
    }
    free(h.data);
    return 0;
}