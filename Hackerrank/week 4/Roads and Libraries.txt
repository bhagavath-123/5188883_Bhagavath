long roadsAndLibraries(int n, int c_lib, int c_road, int cities_rows, int cities_columns, int** cities) {
    if (c_lib <= c_road) return (long)n * c_lib;
    int* visited = calloc(n + 1, sizeof(int));
    int** adj = malloc((n + 1) * sizeof(int*));
    int* deg = calloc(n + 1, sizeof(int));
    for (int i = 1; i <= n; i++) adj[i] = malloc((cities_rows + 2) * sizeof(int));
    for (int i = 0; i < cities_rows; i++) {
        int u = cities[i][0], v = cities[i][1];
        adj[u][deg[u]++] = v;
        adj[v][deg[v]++] = u;
    }
    long cost = 0;
    for (int city = 1; city <= n; city++) {
        if (!visited[city]) {
            long stack_size = 0;
            int* stack = malloc((n + 1) * sizeof(int));
            stack[stack_size++] = city;
            visited[city] = 1;
            long nodes = 1;
            while (stack_size) {
                int curr = stack[--stack_size];
                for (int j = 0; j < deg[curr]; j++) {
                    int next = adj[curr][j];
                    if (!visited[next]) {
                        visited[next] = 1;
                        stack[stack_size++] = next;
                        nodes++;
                    }
                }
            }
            cost += c_lib + (nodes - 1) * c_road;
            free(stack);
        }
    }
    for (int i = 1; i <= n; i++) free(adj[i]);
    free(adj);
    free(deg);
    free(visited);
    return cost;
}
